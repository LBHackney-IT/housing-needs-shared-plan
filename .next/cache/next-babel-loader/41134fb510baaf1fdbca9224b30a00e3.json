{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { nanoid } from 'nanoid';\nimport { ArgumentError, Plan } from '../domain';\n\nvar PlanGateway = /*#__PURE__*/function () {\n  function PlanGateway(_ref) {\n    var client = _ref.client;\n\n    _classCallCheck(this, PlanGateway);\n\n    this.client = client;\n    this.tableName = 'plans';\n  }\n\n  _createClass(PlanGateway, [{\n    key: \"create\",\n    value: function create(_ref2) {\n      var firstName, lastName, id, request, result;\n      return _regeneratorRuntime.async(function create$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              firstName = _ref2.firstName, lastName = _ref2.lastName;\n\n              if (firstName) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new ArgumentError('first name cannot be null.');\n\n            case 3:\n              if (lastName) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new ArgumentError('last name cannot be null.');\n\n            case 5:\n              id = nanoid(20);\n              request = {\n                TableName: this.tableName,\n                Item: {\n                  id: id,\n                  created: new Date(Date.now()).toISOString(),\n                  firstName: firstName,\n                  lastName: lastName\n                }\n              };\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(this.client.put(request).promise());\n\n            case 9:\n              result = _context.sent;\n              return _context.abrupt(\"return\", new Plan(result.Items[0]));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"get\",\n    value: function get(_ref3) {\n      var id, request, result;\n      return _regeneratorRuntime.async(function get$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              id = _ref3.id;\n\n              if (id) {\n                _context2.next = 3;\n                break;\n              }\n\n              throw new ArgumentError('id cannot be null.');\n\n            case 3:\n              request = {\n                TableName: this.tableName,\n                KeyConditionExpression: 'id = :id',\n                ExpressionAttributeValues: {\n                  ':id': id\n                }\n              };\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(this.client.query(request).promise());\n\n            case 6:\n              result = _context2.sent;\n\n              if (!(result.Items.length === 0)) {\n                _context2.next = 9;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", null);\n\n            case 9:\n              return _context2.abrupt(\"return\", new Plan(result.Items[0]));\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return PlanGateway;\n}();\n\nexport { PlanGateway as default };","map":null,"metadata":{},"sourceType":"module"}